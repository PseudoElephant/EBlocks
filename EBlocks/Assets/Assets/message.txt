 /// <summary>
    /// Returns neighboring container in the given direction if found; Otherwise <c>null</c>.
    /// </summary>
    /// <param name="i">Horizontal index from which to search from</param>
    /// <param name="j">Vertical index from which to search from</param>
    /// <param name="direction">Direction in which to search for neighbor</param>
    /// <returns><see cref="Container"/> if found; Otherwise <c>null</c>.</returns>
    public Container GetNeighboringContainer(int i, int j, Direction direction)
    {
        throw new System.NotImplementedException();
    }

    /// <summary>
    /// Returns all 4 neighboring Containers in the array from given position an array. Up, Right, Down, Left.
    /// </summary>
    /// <param name="x">x position to check for neighbors</param>
    /// <param name="y">y position to check for neighbors</param>
    /// <returns><see cref="Container"/> Array with Containers if found; Otherwise <c>null</c> will replace missing containers.</returns>
    public Container[] GetNeihboringContainers(float x, float y)
    {
        throw new System.NotImplementedException();
    }

    /// <summary>
    /// Returns all 4 neighboring Containers in the array from given position an array. Up, Right, Down, Left.
    /// </summary>
    /// <param name="i">i index to check for neighbors</param>
    /// <param name="j">j position to check for neighbors</param>
    /// <returns><see cref="Container"/> Array with Containers if found; Otherwise <c>null</c> will be in the array.</returns>
    public Container[] GetNeighboringContainers(int i, int j)
    {
        throw new System.NotImplementedException();
    }

    /// <summary>
    /// Returns the container at given coordinates.
    /// </summary>
    /// <param name="x">x position</param>
    /// <param name="y">y position</param>
    /// <returns><see cref="Container"/> if found; Otherwise <c>null</c>.</returns>
    public Container GetContainerAt(float x, float y)
    {
        throw new System.NotImplementedException();
    }

    /// <summary>
    /// Returns the container at given index.
    /// </summary>
    /// <param name="i">i index</param>
    /// <param name="j">j index</param>
    /// <returns><see cref="Container"/> if found; Otherwise <c>null</c>.</returns>
    public Container GetContainerAt(int i, int j)
    {
        throw new System.NotImplementedException();
    }
    #endregion